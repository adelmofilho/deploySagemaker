AWSTemplateFormatVersion: "2010-09-09"

Parameters:

    Organization: 
        Type: String
        Description: Name of organization owned by the project

    ProjectName: 
        Type: String
        Description: Name of project

    ModelImage:
        Type: String

Resources:

    ApiGateway:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Description: "Rest API for mlworks irisdeploy"
            EndpointConfiguration: 
                Types: 
                    - REGIONAL
            Name: "mlworks-irisdeploy-restapi"

    PostMethod:        
        Type: AWS::ApiGateway::Method
        Properties: 
            AuthorizationType: NONE
            HttpMethod: POST
            Integration:
                IntegrationHttpMethod: "POST"
                Type: "AWS_PROXY"
                Uri: !Sub
                  - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                  - lambdaArn: !GetAtt "LambdaFunction.Arn"
            OperationName: predict
            ResourceId: !GetAtt ApiGateway.RootResourceId
            RestApiId: !Ref ApiGateway

    lambdaApiGatewayInvoke:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt "LambdaFunction.Arn"
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/"
    
    
    ApiGatewayDeployment:
        Type: "AWS::ApiGateway::Deployment"
        DependsOn: PostMethod
        Properties:
            RestApiId: !Ref ApiGateway
            StageName: iris

    LambdaFunction:
        Type: AWS::Lambda::Function
        Properties:         
          FunctionName: !Sub "${Organization}-${ProjectName}"
          Description: !Sub "${Organization}'s ${ProjectName} Lambda Function"
          Runtime: python3.6
          Role: !GetAtt LambdaRole.Arn
          Handler: index.handler
          Code:
            ZipFile: |
                import os
                import io
                import boto3
                import json
                import csv
                
                
                # grab environment variables
                ENDPOINT_NAME = os.environ['ENDPOINT_NAME']
                # grab runtime client
                runtime = boto3.client('runtime.sagemaker')
                
                def handler(event, context):
                    # Load data from POST request
                    data = json.loads(json.dumps(event))
                    
                    # Grab the payload
                    payload = data['body']
                    
                    # Invoke the model. In this case the data type is a JSON but can be other things such as a CSV
                    response = runtime.invoke_endpoint(EndpointName=ENDPOINT_NAME,
                                                ContentType='application/json',
                                                Body=payload)
                    
                    # Get the body of the response from the model
                    result = response['Body'].read().decode()
                
                    # Return it along with the status code of 200 meaning this was succesful 
                    return {
                        'statusCode': 200,
                        'body': result
                    }
          MemorySize: 128
          Timeout: 60
          KmsKeyArn: !GetAtt EndpointCMK.Arn
        #   VpcConfig:
        #     SecurityGroupIds:
        #       - !Ref SecurityGroup
        #     SubnetIds:
        #       - subnet-c702d1a1
        #       - subnet-7f805924
          Environment:
            Variables:
                ENDPOINT_NAME: !GetAtt Endpoint.EndpointName

    SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: !Sub "${Organization} ${ProjectName} Lambda SecurityGroup"
            GroupName: !Sub "${Organization}${ProjectName}"
            SecurityGroupIngress: 
            - IpProtocol: tcp
              FromPort: 443
              ToPort: 443
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress: 
            - IpProtocol: "-1"
              CidrIp: 0.0.0.0/0
            VpcId: vpc-3aaf895d

    Model:
        Type: "AWS::SageMaker::Model"
        Properties:
            ModelName: !Sub "${Organization}-${ProjectName}-Model"
            PrimaryContainer:
                Image: !Ref ModelImage
                Mode: SingleModel
            ExecutionRoleArn: !GetAtt ExecutionRole.Arn

    Endpoint:
        Type: "AWS::SageMaker::Endpoint"
        Properties:
            EndpointName: !Sub "${Organization}-${ProjectName}-Endpoint"
            EndpointConfigName:
                !GetAtt EndpointConfig.EndpointConfigName

    EndpointConfig:
        DependsOn: EndpointCMK
        Type: "AWS::SageMaker::EndpointConfig"
        Properties:
            EndpointConfigName: !Sub "${Organization}-${ProjectName}-EndpointConfig"
            KmsKeyId: !Sub "alias/${ProjectName}"
            ProductionVariants:
                - InitialInstanceCount: 1
                  InitialVariantWeight: 1.0
                  InstanceType: ml.t2.medium
                  ModelName: !GetAtt Model.ModelName
                  VariantName: !GetAtt Model.ModelName
    
    EndpointAliasCMK:
        Type: AWS::KMS::Alias
        Properties: 
            AliasName: !Sub "alias/${ProjectName}"
            TargetKeyId: !Ref EndpointCMK

    EndpointCMK:
        Type: AWS::KMS::Key
        Properties: 
            Description: !Sub "Endpoint Customer Master Key of ${Organization}'s ${ProjectName}"
            Enabled: true
            EnableKeyRotation: false
            KeyPolicy: 
                Version: '2012-10-17'
                Id: key-default-1
                Statement:
                - Sid: Allow administration of the key
                  Effect: Allow
                  Principal: 
                    AWS: "*"
                  Action:
                  - kms:Create*
                  - kms:Describe*
                  - kms:Enable*
                  - kms:List*
                  - kms:Put*
                  - kms:Update*
                  - kms:Revoke*
                  - kms:Disable*
                  - kms:Get*
                  - kms:Delete*
                  - kms:ScheduleKeyDeletion
                  - kms:CancelKeyDeletion
                  Resource: '*'
                - Sid: Allow use of the key
                  Effect: Allow
                  Principal: 
                    AWS: "*"
                  Action:
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey
                  - kms:GenerateDataKeyWithoutPlaintext
                  Resource: '*'
            KeyUsage: ENCRYPT_DECRYPT
            PendingWindowInDays: 7
            Tags: 
                - Key: Project
                  Value: !Ref ProjectName
                - Key: Organization
                  Value: !Ref Organization

    LambdaRole: 
        Type: "AWS::IAM::Role"
        Properties: 
            AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - 
                        Effect: "Allow"
                        Principal: 
                            Service: 
                                - "lambda.amazonaws.com"
                        Action: 
                            - "sts:AssumeRole"
            Path: "/"
            Policies: 
                -   
                    PolicyName: "lambda-endpoint"
                    PolicyDocument: 
                        Version: "2012-10-17"
                        Statement: 
                            - 
                                Effect: "Allow"
                                Action: "lambda:*"
                                Resource: "*"
                            - 
                                Effect: "Allow"
                                Action: "sagemaker:*"
                                Resource: "*"
                            - 
                                Effect: "Allow"
                                Action: 
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutLogEvents
                                Resource: "*"
                            - 
                                Effect: "Allow"
                                Action: 
                                    - xray:*
                                    - ec2:*
                                Resource: "*"

    ExecutionRole: 
        Type: "AWS::IAM::Role"
        Properties: 
            AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - 
                        Effect: "Allow"
                        Principal: 
                            Service: 
                                - "sagemaker.amazonaws.com"
                        Action: 
                            - "sts:AssumeRole"
            Path: "/"
            Policies: 
                -   
                    PolicyName: "root-sagemaker-endpoint"
                    PolicyDocument: 
                        Version: "2012-10-17"
                        Statement: 
                            - 
                                Effect: "Allow"
                                Action: "sagemaker:*"
                                Resource: "*"
                            - 
                                Effect: "Allow"
                                Action: "ecr:*"
                                Resource: "*"